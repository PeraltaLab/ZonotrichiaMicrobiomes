new.data <-cbind(design,dataREL)
new.data.WTSP.NY <- subset(new.data, species == "WTSP" & location == "NY")
adonis = adonis(new.data.WTSP.NY[,-c(1:6)]~morph, method = "bray", data = new.data.WTSP.NY, perm=1000)
adonis
# Remove OTUs with less than two occurences across all sites
otus <- otu.in[, which(colSums(otu.in) >= 2)]
# Make Relative Abundance Matrices
dataREL <- otus
for(i in 1:dim(otus)[1]){
dataREL[i,] <- otus[i,]/sum(otus[i,])
}
#PERMANOVA
new.data <-cbind(design,dataREL)
# Principal Coordinates Analysis - WTSP NY x morph
dataREL.dist <- vegdist(new.data.WTSP.NY, method="bray")
#PERMANOVA
new.data <-cbind(design,dataREL)
new.data.WTSP.NY <- subset(new.data, species == "WTSP" & location == "NY")
adonis = adonis(new.data.WTSP.NY[,-c(1:6)]~morph, method = "bray", data = new.data.WTSP.NY, perm=1000)
adonis
# Principal Coordinates Analysis - WTSP NY x morph
dataREL.dist <- vegdist(new.data.WTSP.NY, method="bray")
# Principal Coordinates Analysis - WTSP NY x morph
dataREL.dist <- vegdist(new.data.WTSP.NY[,-c(1:6)], method="bray")
pcoa <- cmdscale(dataREL.dist, k=3, eig=TRUE, add=FALSE)
explainvar1b <- round(pcoa$eig[1] / sum(pcoa$eig), 3) * 100
explainvar2b <- round(pcoa$eig[2] / sum(pcoa$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #30.2
explainvar2b #21.6
View(pcoa)
pcoa.groups <- paste(new.data.WTSP.NY$age, new.data.WTSP.NY$morph, sep = "_")
pcoa.points <- data.frame(pcoa$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
pcoa.col <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 2)) # morph
pcoa.shape <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 1))  # age
df1a <- as.data.frame(pcoa.cent.dataframe)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=pcoa.col, shape = pcoa.shape,
group = interaction(pcoa.col, pcoa.shape))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75)
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
#scale_colour_manual(labels = c("SA","SOURCE", "WWWD"),
# values = c("#33CCFF", "#CCCCCC","#336600")) +
#scale_fill_manual(labels = c("SA","SOURCE", "WWWD"),
# values = c("#33CCFF", "#CCCCCC","#336600"))  +
#scale_shape_manual(labels = c("bird","exit","pre","source"),
#  values = c(21, 24, 22, 25)) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Location", shape = "Transect") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
morph
# Principal Coordinates Analysis
df1a <- as.data.frame(pcoa.cent.dataframe)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=pcoa.col, shape = pcoa.shape,
group = interaction(pcoa.col, pcoa.shape))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
scale_colour_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_fill_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_shape_manual(labels = c("AHY","N"),
values = c(21, 24)) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Morph", shape = "Age") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
ggsave("../figures/16SrRNA_WTSPxMorph.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=900, limitsize=TRUE)
# Principal Coordinates Analysis
df1a <- as.data.frame(pcoa.cent.dataframe)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=pcoa.col, shape = pcoa.shape,
group = interaction(pcoa.col, pcoa.shape))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
scale_colour_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_fill_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_shape_manual(labels = c("AHY","N"),
values = c(21, 24)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Morph", shape = "Age") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
ggsave("../figures/16SrRNA_WTSPxMorph.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=900, limitsize=TRUE)
dim(new.data.WTSP.NY)
rm(list=ls())
setwd("~/GitHub/Zonotrichia/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("tidyr")
require("reshape2")
require("picante")
# Import Environmental Data
design <- read.csv("../data/Zonotrichia_design.csv", header=TRUE)
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/Zonotrichia.opti_mcc.shared")
# Remove OTUs with less than two occurences across all sites
otus <- otu.in[, which(colSums(otu.in) >= 2)]
# Make Presence Absence Matrix
dataPA <- (otus > 0) * 1
dataREL <- otus
for(i in 1:dim(otus)[1]){
dataREL[i,] <- otus[i,]/sum(otus[i,])
}
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/Zonotrichia.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 8106. We are sampling to 8000)
min(rowSums(otus))
max(rowSums(otus))
mean(rowSums(otus))
# OTU table - remove otu's w/ < 2 occurrences across all sites
otu_removal <- otus[, which(colSums(otus) >= 2)]
dim(otu_removal)
aa <- (rowSums(otu_removal))
aa
#PERMANOVA
new.data <-cbind(design,dataREL)
new.data.WTSP.NY <- subset(new.data, species == "WTSP" & location == "NY")
adonis = adonis(new.data.WTSP.NY[,-c(1:6)]~morph, method = "bray", data = new.data.WTSP.NY, perm=1000)
adonis
adonis = adonis(new.data[,-c(1:6)]~species, method = "bray", data = new.data, perm=1000)
adonis
# Principal Coordinates Analysis - WTSP NY x morph
dataREL.dist <- vegdist(new.data.WTSP.NY[,-c(1:6)], method="bray")
pcoa <- cmdscale(dataREL.dist, k=3, eig=TRUE, add=FALSE)
explainvar1b <- round(pcoa$eig[1] / sum(pcoa$eig), 3) * 100
explainvar2b <- round(pcoa$eig[2] / sum(pcoa$eig), 3) * 100
sum.eigb <- sum(explainvar1b, explainvar2b)
explainvar1b #25.2
explainvar2b #16.5
pcoa.groups <- paste(new.data.WTSP.NY$age, new.data.WTSP.NY$morph, sep = "_")
pcoa.points <- data.frame(pcoa$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
pcoa.col <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 2)) # morph
pcoa.shape <- as.factor(sapply(strsplit(pcoa.cent.treats, "_"), `[`, 1))  # age
# Principal Coordinates Analysis
df1a <- as.data.frame(pcoa.cent.dataframe)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=pcoa.col, shape = pcoa.shape,
group = interaction(pcoa.col, pcoa.shape))) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
scale_colour_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_fill_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_shape_manual(labels = c("AHY","N"),
values = c(21, 24)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Morph", shape = "Age") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
scale_colour_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_fill_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_shape_manual(labels = c("AHY","N"),
values = c(21, 24)) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Morph", shape = "Age") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(fill=pcoa.col), colour = "black", size=5, stroke = 0.75) +
scale_colour_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_fill_manual(labels = c("tan","white"),
values = c("#CC9966", "#FFFFFF")) +
scale_shape_manual(labels = c("AHY","N"),
values = c(21, 24)) +
theme(axis.title = element_text(size=18), axis.text=element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size=1.25)) +
theme(axis.ticks.length=unit(0.3,"cm")) +
xlab("PCoA 1 (25.2%)") + ylab("PCoA 2 (16.5%)") +
labs(fill = "Morph", shape = "Age") +
guides(fill = guide_legend(override.aes = list(pch=21, size = 4, colour="black")))
ggsave("../figures/16SrRNA_WTSPxMorph.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=900, limitsize=TRUE)
rm(list=ls())
setwd("~/GitHub/SylvanHeightsMyco/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("tidyr")
require("reshape2")
require("picante")
# Import Environmental Data
design <- read.csv("../data/SH_design.csv", header=TRUE)
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/SH.opti_mcc.shared")
# Remove OTUs with less than two occurences across all sites
otus <- otu.in[, which(colSums(otu.in) >= 2)]
# Make Presence Absence Matrix
dataPA <- (otus > 0) * 1
# Make Relative Abundance Matrices
dataREL <- otus
for(i in 1:dim(otus)[1]){
dataREL[i,] <- otus[i,]/sum(otus[i,])
}
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/SH.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 8106. We are sampling to 8000)
min(rowSums(otus))
max(rowSums(otus))
mean(rowSums(otus))
SH.r <- rrarefy(otus, 8000)
# Fisher's Alpha
fisher <- fisher.alpha(SH.r)
# Species Richness
richness <- rowSums((SH.r >= 1))
# Shannon Diversity
shannon <- diversity(SH.r, "shannon")
# Simpson's Evenness
simp.even <- apply(SH.r, 1, simp_even)
#Pielou’s evenness
J <- shannon/log(specnumber(SH.r[,-c(1:1)]))
#combined richness, diversity, evenness
diversity <- cbind(design,richness,shannon,simp.even,J)
# Graphing Richness
p <- ggplot(csi_otu.div, aes(x=Location, y=richness, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "white", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
# Graphing Richness
p <- ggplot(diversity, aes(x=Location, y=richness, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "white", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = -90, vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 90, vjust=0.65, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.95, hjust=0.5, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.75, hjust=0.65, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.75, hjust=0.75, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.75, hjust=0.45, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.65, hjust=0.45, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.75, hjust=0.35, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.35, hjust=0.35, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.85, hjust=0.35, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 45, vjust=0.75, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.75, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.75, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.75, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.75, hjust=-0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.75, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.65, hjust=0.25, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.65, hjust=0.45, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 35, vjust=0.65, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.65, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.75, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.85, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.85, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.85, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
rm(list=ls())
setwd("~/GitHub/SylvanHeightsMyco/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("tidyr")
require("reshape2")
require("picante")
# Import Environmental Data
design <- read.csv("../data/SH_design.csv", header=TRUE)
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/SH.opti_mcc.shared")
# Remove OTUs with less than two occurences across all sites
otus <- otu.in[, which(colSums(otu.in) >= 2)]
# Make Presence Absence Matrix
dataPA <- (otus > 0) * 1
# Make Relative Abundance Matrices
dataREL <- otus
for(i in 1:dim(otus)[1]){
dataREL[i,] <- otus[i,]/sum(otus[i,])
}
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/SH.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 8106. We are sampling to 8000)
min(rowSums(otus))
max(rowSums(otus))
mean(rowSums(otus))
SH.r <- rrarefy(otus, 8000)
# Fisher's Alpha
fisher <- fisher.alpha(SH.r)
# Species Richness
richness <- rowSums((SH.r >= 1))
# Shannon Diversity
shannon <- diversity(SH.r, "shannon")
# Simpson's Evenness
simp.even <- apply(SH.r, 1, simp_even)
#Pielou’s evenness
J <- shannon/log(specnumber(SH.r[,-c(1:1)]))
#combined richness, diversity, evenness
diversity <- cbind(design,richness,shannon,simp.even,J)
# Graphing Richness
p <- ggplot(diversity, aes(x=Location, y=richness, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "gray", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.85, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
rm(list=ls())
setwd("~/GitHub/SylvanHeightsMyco/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("ade4")
require("tidyr")
require("reshape2")
require("picante")
# Import Environmental Data
design <- read.csv("../data/SH_design.csv", header=TRUE)
# Import OTU data
# Import Raw Data
otu.in <- read.otu("../data/SH.opti_mcc.shared")
# Remove OTUs with less than two occurences across all sites
otus <- otu.in[, which(colSums(otu.in) >= 2)]
# Make Presence Absence Matrix
dataPA <- (otus > 0) * 1
# Make Relative Abundance Matrices
dataREL <- otus
for(i in 1:dim(otus)[1]){
dataREL[i,] <- otus[i,]/sum(otus[i,])
}
# Import Taxonomy File
otu.tax <- read.tax(taxonomy = "../data/SH.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
# Rarefy Abundances (min abundance is 8106. We are sampling to 8000)
min(rowSums(otus))
max(rowSums(otus))
mean(rowSums(otus))
SH.r <- rrarefy(otus, 8000)
# Fisher's Alpha
fisher <- fisher.alpha(SH.r)
# Species Richness
richness <- rowSums((SH.r >= 1))
# Shannon Diversity
shannon <- diversity(SH.r, "shannon")
# Simpson's Evenness
simp.even <- apply(SH.r, 1, simp_even)
#Pielou’s evenness
J <- shannon/log(specnumber(SH.r[,-c(1:1)]))
#combined richness, diversity, evenness
diversity <- cbind(design,richness,shannon,simp.even,J)
# Graphing Richness
p <- ggplot(diversity, aes(x=Location, y=richness, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "gray", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.85, hjust=0.55, size=14), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 25, vjust=0.85, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.85, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.95, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
# Graphing Richness
p <- ggplot(diversity, aes(x=Location, y=richness, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "gray", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.95, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Richness") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/richness.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Richness
p <- ggplot(diversity, aes(x=Location, y=shannon, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "gray", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.95, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Shannon Diversity Index (H')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/shannon.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
# Graphing Evenness
p <- ggplot(diversity, aes(x=Location, y=J, color=as.factor(Location)))+ scale_color_manual(name="Location", values=c("black","purple", "gray", "blue")) + stat_summary(fun.data=mean_cl_boot,size=0.75)
p1=p+geom_smooth(method="lm")+facet_wrap(~Transect)+facet_grid(. ~ Transect, labeller=labeller(Date2 = labels))
p1 + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +theme(axis.title=element_text(vjust=1,size=16,face="bold"), axis.text=element_text(size=14), axis.text.x = element_text(angle = 20, vjust=0.95, hjust=0.55, size=12), panel.border = element_rect(colour = "black",size=1)) + theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Location", y = "Pielou's Evenness (J')") + theme(strip.text.x = element_text(size=16, face="bold"), strip.text.y = element_text(size=16, face="bold"), strip.background = element_rect(colour="black", fill="white", size=1))
ggsave("../figures/evenness.pdf", plot=last_plot(), device=NULL, path=NULL, scale=1, width=NA, height=NA, dpi=300, limitsize=TRUE)
#PERMANOVA
new.data <-cbind(design,dataREL)
adonis = adonis(new.data[,-c(1:6)]~Transect*Location, method = "bray", data = new.data, perm=1000)
adonis
adonis = adonis(new.data[,-c(1:7)]~Transect*Location, method = "bray", data = new.data, perm=1000)
adonis
#PERMANOVA
new.data <-cbind(design,dataREL)
adonis = adonis(new.data[,-c(1:7)]~Transect*Location, method = "bray", data = new.data, perm=1000)
adonis
new.data <-cbind(design,dataREL)
library("labdsv")
design.type <- new.data$Transect
dataREL.ind <- dataREL[, colSums(dataREL) > 0.05]
bac.ind <- indval(dataREL.ind, design.type)
levels(design.type)
summary(bac.ind)
inds <- which(bac.ind$pval <= 0.05)
bac.indicators <- as.data.frame(matrix(NA, nrow = length(inds), ncol = 4))
colnames(bac.indicators) <- c("OTU", "Cluster", "IndVal", "Prob")
bac.indicators$OTU <- names(inds)
bac.indicators$Cluster <- bac.ind$maxcls[inds]
bac.indicators$IndVal <- bac.ind$indcls[inds]
bac.indicators$Prob <- bac.ind$pval[inds]
ind.tax <- otu.tax[which(as.character(otu.tax$OTU) %in% bac.indicators$OTU), ]
ind.tax <- ind.tax[match(ind.tax$OTU, bac.indicators$OTU), ]
indicator.bac <- cbind(bac.indicators, ind.tax[, -c(1)])
indicator.bac <- indicator.bac[order(as.numeric(indicator.bac$Cluster)), ]
table(indicator.bac$Cluster)
table(indicator.bac$Phylum)
table(indicator.bac$Cluster)
levels(design.type)
# Export Bacteria Indicator Table
write.table(indicator.bac, "../data/BacterialIndicators_Location.txt",
sep="\t", row.names = F, quote = F)
rm(list=ls())
setwd("~/GitHub/BP_crobes/analyses")
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code Dependencies
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan")
require("vegan")
require("nlme")
require("reshape")
require("ggplot2")
require("tidyr")
require("reshape2")
require("picante")
# Import Environmental Data
design <- read.csv("../data/BP_design.csv", header=TRUE)
